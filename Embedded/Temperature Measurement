#include <WiFi.h>
#include <PubSubClient.h>
#include <string.h>
#include <Arduino.h>
#include <stdio.h>
#include "driver/adc.h"

#define LMT84_PIN ADC1_CHANNEL_4 // GPIO 32
#define trigPin GPIO_NUM_27
#define echoPin GPIO_NUM_14
#define interruptButton GPIO_NUM_4
#define wifiLed GPIO_NUM_13
#define buttonLed GPIO_NUM_12

const char *ssid = "Eduardo";
const char *password = "1234512345";

// const char *ssid = "IPhone";
// const char *password = "12345678";

const char *mqtt_server = "masbarato.space";

WiFiClient espClient;

PubSubClient client(espClient);

long duration;
int distance;
int counter = 0;
unsigned long lastDebounceTime = 0;
unsigned long debounceDelay = 250;

void setup()
{
  pinMode(trigPin, OUTPUT);
  pinMode(echoPin, INPUT);
  pinMode(interruptButton, INPUT);
  pinMode(wifiLed, OUTPUT);
  pinMode(buttonLed, OUTPUT);

  digitalWrite(interruptButton, LOW);

  Serial.begin(115200);
  // Connect to Wi-Fi network
  WiFi.begin("LIB-0762397", "j8kcXyvWcb2x");

  while (WiFi.status() != WL_CONNECTED)
  {
    delay(1000);
    Serial.println("Connecting to WiFi...");
    gpio_set_level(wifiLed, 0);
  }

  Serial.println("Connected to WiFi");

  // Connect to MQTT broker
  client.setServer(mqtt_server, 1883);

  while (!client.connected())
  {
    Serial.println("Connecting to MQTT broker...");
    if (client.connect("ESP32Client"))
    {
      Serial.println("Connected to MQTT broker");
    }
    else
    {
      Serial.print("Failed to connect to MQTT broker, rc=");
      Serial.print(client.state());
      Serial.println(" retrying in 5 seconds");
      delay(5000);
    }
  }
}

void loop()
{

  if (WiFi.status() == WL_CONNECTED)
  {

    gpio_set_level(wifiLed, 1);
  }
  else
  {
    gpio_set_level(wifiLed, 0);
  }

  uint16_t rawValue = adc1_get_raw(LMT84_PIN);

  float voltage = rawValue * (3.3 / 4095.0);

  float temperature = (voltage - 1.25) / 0.05;

  Serial.print("Temperature: ");
  Serial.print(temperature);
  Serial.println(" degrees Celsius");

  char temperatureStr[10];
  snprintf(temperatureStr, 10, "%.2f", temperature);
  client.publish("Temperatura", temperatureStr);

  digitalWrite(trigPin, LOW);
  delayMicroseconds(2);
  digitalWrite(trigPin, HIGH);
  delayMicroseconds(10);
  digitalWrite(trigPin, LOW);

  duration = pulseIn(echoPin, HIGH);

  distance = duration * 0.034 / 2;
  Serial.print("Distance: ");
  Serial.println(distance);

  if (distance <= 150)
  { // 183
    Serial.println("Movement detected!");
    counter++;
  }

  int old_counter = counter;

  int buttonState = digitalRead(interruptButton);
  if (buttonState == HIGH && (millis() - lastDebounceTime) > debounceDelay)
  {
    counter--;
    Serial.println("Button pressed! Count = " + String(counter));
    lastDebounceTime = millis();
  }

  Serial.print("Counter: ");
  Serial.println(counter);

  char distanceStr[10];
  snprintf(distanceStr, 10, "%d", old_counter);
  client.publish("Capacidad", distanceStr);

  snprintf(distanceStr, 10, "%d", counter);
  client.publish("Capacidad", distanceStr);

  delay(1000);
  digitalWrite(interruptButton, LOW);
}
